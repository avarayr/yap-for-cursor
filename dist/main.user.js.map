{
  "version": 3,
  "sources": ["../src/asr/instance.ts", "../node_modules/@aidenlx/esbuild-plugin-inline-worker/dist/utils.js", "inline-worker:/var/folders/wt/r3jjdtb90sl84637qrrd32s00000gn/T/epiw-KEMUNR/worker_h7bgh.ts", "../src/asr/manager.ts", "../src/config.ts", "../src/ui/dom-selectors.ts", "../src/audio/processing.ts", "../src/ui/context-menu.ts", "_nq8jmdobf:/Users/mika/experiments/cursor-voice/src/styles/styles.css", "../src/ui/mic-button.ts", "../src/main.ts"],
  "sourcesContent": ["import type { AsrInstance } from \"../types\";\n\ndeclare global {\n  interface Window {\n    _currentAsrInstance?: AsrInstance | null;\n  }\n}\n\n/**\n * Sets the current global ASR instance.\n */\nexport function setCurrentAsrInstance(instance: AsrInstance | null) {\n  window._currentAsrInstance = instance;\n}\n\n/**\n * Gets the current global ASR instance.\n */\nexport function getCurrentAsrInstance(): AsrInstance | null {\n  return window._currentAsrInstance ?? null;\n}\n", "/**\n * @param script code of worker script\n */\nexport const toObjectURL = (script) => {\n    const blob = new Blob([script], { type: \"text/javascript\" });\n    const url = URL.createObjectURL(blob);\n    return url;\n};\n/**\n * @param script code of worker script\n */\nexport const fromScriptText = (script, options) => {\n    const url = toObjectURL(script);\n    const worker = new Worker(url, options);\n    URL.revokeObjectURL(url);\n    return worker;\n};\nexport const fromDataURI = (uri, options) => {\n    const worker = new Worker(uri, options);\n    return worker;\n};\n", "var C=Object.defineProperty,F=Object.defineProperties;var x=Object.getOwnPropertyDescriptors;var V=Object.getOwnPropertySymbols;var H=Object.prototype.hasOwnProperty,A=Object.prototype.propertyIsEnumerable;var w=(e,r,o)=>r in e?C(e,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[r]=o,T=(e,r)=>{for(var o in r||(r={}))H.call(r,o)&&w(e,o,r[o]);if(V)for(var o of V(r))A.call(r,o)&&w(e,o,r[o]);return e},M=(e,r)=>F(e,x(r));console.log(\"[Voice Worker] Code execution started.\");var d=!1,m=\"onnx-community/whisper-base\",l=null,i=null,s=null,t=null,n=!1,c=!1,W,G,v,P,y,f;async function z(){console.log(\"[Voice Worker][Init] Initializing Transformers library...\");try{let e=await import(\"https://cdn.jsdelivr.net/npm/@huggingface/transformers@3.5.0\");console.log(\"[Voice Worker][Init] Transformers library imported successfully.\"),{AutoTokenizer:W,AutoProcessor:G,WhisperForConditionalGeneration:v,TextStreamer:P,full:y,env:f}=e,f.allowLocalModels=!1,f.backends.onnx.logLevel=\"info\"}catch(e){throw console.error(\"[Voice Worker][Init] Failed to import Transformers library:\",e),e}}async function S(e){console.log(\"[Voice Worker][Load] Loading model components...\"),W||await z(),n=!1,c=!1;try{let r=[W.from_pretrained(m,{progress_callback:e}),G.from_pretrained(m,{progress_callback:e}),v.from_pretrained(m,{dtype:{encoder_model:\"fp32\",decoder_model_merged:\"q4\"},device:\"webgpu\",progress_callback:e})],o=await Promise.all(r);if(console.log(\"[Voice Worker][Load] All model components loaded.\"),l=o[0],i=o[1],s=o[2],!l||!i||!s)throw new Error(\"[Voice Worker][Load] Model components not assigned correctly after load.\");await E(),n=!0,console.log(\"[Voice Worker][Load] Model is loaded and warmed up.\")}catch(r){throw console.error(\"[Voice Worker][Load] Model loading or warmup failed:\",r),l=null,i=null,s=null,n=!1,c=!1,t=null,r}}async function E(){if(!s||!y){console.warn(\"[Voice Worker][Warmup] Cannot warmup model: Not loaded yet.\");return}if(c){console.log(\"[Voice Worker][Warmup] Model already warmed up.\");return}console.log(\"[Voice Worker][Warmup] Warming up model...\");try{let o={input_features:y([1,80,3e3],0),max_new_tokens:1,generation_config:{}};await s.generate(o),c=!0,console.log(\"[Voice Worker][Warmup] Model warmup successful.\")}catch(e){console.warn(\"[Voice Worker][Warmup] Model warmup failed:\",e),c=!1}}var k=!1;async function L({audio:e,language:r}){if(k){console.warn(\"[Voice Worker][Generate] Already processing audio.\"),self.postMessage({status:\"error\",data:\"Already processing audio.\"});return}if(!e||e.length===0){console.warn(\"[Voice Worker][Generate] No audio data received.\"),self.postMessage({status:\"error\",data:\"No audio data received.\"});return}if(!n||!l||!i||!s){console.error(\"[Voice Worker][Generate] Model not ready for transcription.\"),self.postMessage({status:\"error\",data:\"Model not ready.\"});return}k=!0,d=!1,console.log(\"[Voice Worker][Generate] Starting transcription process...\"),self.postMessage({status:\"transcribing_start\"});try{console.log(\"[Voice Worker][Generate] Processing audio input...\");let o=await i(e);console.log(\"[Voice Worker][Generate] Audio processed.\");let a=null,u=0,g=\"\",h=_=>{if(d){console.log(\"[Voice Worker][Generate] Streamer callback cancelled.\");return}a!=null||(a=performance.now()),g=_;let p=0;u++>0&&a&&(p=u/(performance.now()-a)*1e3),self.postMessage({status:\"update\",output:g,tps:p?parseFloat(p.toFixed(1)):0,numTokens:u})};console.log(\"[Voice Worker][Generate] Creating text streamer...\");let b=new P(l,{skip_prompt:!0,skip_special_tokens:!0,callback_function:h});console.log(\"[Voice Worker][Generate] Text streamer created.\"),console.log(\"[Voice Worker][Generate] Starting model generation...\"),await s.generate(M(T({},o),{language:r,streamer:b})),console.log(\"[Voice Worker][Generate] Model generation finished.\"),d?console.log(\"[Voice Worker][Generate] Transcription cancelled post-generation. Discarding result.\"):(console.log(\"[Voice Worker][Generate] Transcription complete. Sending final message.\"),self.postMessage({status:\"complete\",output:g}))}catch(o){console.error(\"[Voice Worker][Generate] Transcription failed:\",o),self.postMessage({status:\"error\",data:`Transcription failed: ${o instanceof Error?o.message:String(o)}`})}finally{console.log(\"[Voice Worker][Generate] Cleaning up transcription process.\"),k=!1}}console.log(\"[Voice Worker] Setting up message listener.\");self.addEventListener(\"message\",async e=>{if(console.log(\"[Voice Worker][Handler] Received message:\",e.data),!e.data||typeof e.data!=\"object\"||!(\"type\"in e.data)){console.warn(\"[Voice Worker][Handler] Received invalid message format:\",e.data);return}let{type:r,data:o}=e.data;switch(r){case\"load\":if(console.log(\"[Voice Worker][Handler] Handling 'load' message.\"),t){console.log(\"[Voice Worker][Handler] Model loading already in progress or completed.\");try{await t,n&&self.postMessage({status:\"ready\"})}catch(a){console.error(\"[Voice Worker][Handler] Previous load attempt failed.\"),n||self.postMessage({status:\"error\",data:`Model initialization failed: ${a instanceof Error?a.message:String(a)}`})}return}t=S(a=>{a.status===\"progress\"&&self.postMessage({status:\"loading\",data:`Loading: ${a.file} (${a.progress.toFixed(0)}%)`})});try{await t,self.postMessage({status:\"ready\"})}catch(a){console.error(\"[Voice Worker][Handler] loadModel promise rejected:\",a),t=null,n||self.postMessage({status:\"error\",data:`Model initialization failed: ${a instanceof Error?a.message:String(a)}`})}break;case\"generate\":o?(console.log(\"[Voice Worker][Handler] Handling 'generate' message.\"),L(o)):(console.warn(\"[Voice Worker][Handler] 'generate' message received without data.\"),self.postMessage({status:\"error\",data:\"Generate request missing audio data.\"}));break;case\"stop\":console.log(\"[Voice Worker][Handler] Handling 'stop' message.\"),d=!0,console.log(\"[Voice Worker][Handler] Cancellation requested flag set.\");break;default:console.warn(\"[Voice Worker][Handler] Received unknown message type:\",r);break}});console.log(\"[Voice Worker] Message listener set up. Initial script execution complete.\");\n//# sourceMappingURL=worker_h7bgh.ts.map\n", "import type {\n  AsrStatusUpdateDetail,\n  WorkerMessage,\n  WorkerResponse,\n  AsrResultDetail,\n  AsrManagerState,\n} from \"../types\";\nimport { fromScriptText } from \"@aidenlx/esbuild-plugin-inline-worker/utils\";\nimport WorkerCode from \"worker:./worker.ts\";\n\n// Define navigator with gpu property\ninterface NavigatorWithGPU extends Navigator {\n  gpu?: {\n    requestAdapter: () => Promise<GPUAdapter | null>;\n  };\n}\n\ninterface GPUAdapter {\n  requestDevice: () => Promise<GPUDevice>;\n}\n\ninterface GPUDevice {\n  createCommandEncoder: () => GPUCommandEncoder;\n}\n\ninterface GPUCommandEncoder {\n  finish: () => GPUCommandBuffer;\n}\n\ninterface GPUCommandBuffer {}\n\ndeclare const navigator: NavigatorWithGPU;\n\n// --- Refactored ASR State Management ---\nlet managerState: AsrManagerState = \"uninitialized\";\nlet managerMessage: string = \"Click mic to initialize\";\nlet worker: Worker | null = null;\nlet currentWorkerUrl: string | null = null;\n\n/**\n * Updates the manager state and dispatches a global ASR status update event.\n */\nfunction setManagerState(state: AsrManagerState, message?: string) {\n  // Avoid redundant updates if state and message are the same\n  if (state === managerState && message === managerMessage) {\n    return;\n  }\n  console.log(\n    `[ASR Manager] State changing: ${managerState} -> ${state}`,\n    message ? `(${message})` : \"\"\n  );\n  managerState = state;\n\n  // Determine user-facing message based on state\n  switch (state) {\n    case \"uninitialized\":\n      managerMessage = message || \"Click mic to initialize\";\n      break;\n    case \"initializing\":\n      managerMessage = message || \"Initializing ASR...\";\n      break;\n    case \"loading_model\":\n      managerMessage = message || \"Loading ASR model...\";\n      break;\n    case \"warming_up\":\n      managerMessage = message || \"Preparing model...\";\n      break;\n    case \"ready\":\n      managerMessage = message || \"ASR Ready\";\n      break;\n    case \"error\":\n      managerMessage = message || \"ASR Error: Unknown\";\n      break;\n    default:\n      console.warn(\n        \"[ASR Manager] setManagerState called with unknown state:\",\n        state\n      );\n      managerMessage = \"ASR Status Unknown\";\n  }\n\n  // Dispatch the manager state directly\n  console.log(\n    `[ASR Manager] Dispatching asrStatusUpdate: { state: ${state}, message: ${managerMessage} }`\n  );\n  const detail: AsrStatusUpdateDetail = {\n    state: state, // Use the AsrManagerState directly\n    message: managerMessage,\n  };\n  document.dispatchEvent(\n    new CustomEvent<AsrStatusUpdateDetail>(\"asrStatusUpdate\", { detail })\n  );\n}\n\n/**\n * Terminates the worker and resets the state.\n * @param errorMessage Optional error message to set.\n */\nfunction cleanupWorker(errorMessage?: string) {\n  console.warn(\n    `[ASR Manager] Cleaning up worker. Error: ${errorMessage || \"None\"}`\n  );\n  if (worker) {\n    worker.terminate();\n    worker = null;\n  }\n  if (currentWorkerUrl) {\n    URL.revokeObjectURL(currentWorkerUrl);\n    currentWorkerUrl = null;\n  }\n  // Ensure state update happens *after* potential termination\n  setManagerState(errorMessage ? \"error\" : \"uninitialized\", errorMessage);\n}\n\n/**\n * Creates the ASR worker instance and sets up listeners.\n * Should only be called internally.\n */\nfunction createWorker(): boolean {\n  console.log(\"[ASR Manager] createWorker called.\");\n  if (worker) {\n    console.warn(\n      \"[ASR Manager] createWorker called when worker already exists.\"\n    );\n    return true;\n  }\n  if (managerState !== \"uninitialized\" && managerState !== \"error\") {\n    console.warn(\n      `[ASR Manager] createWorker called in unexpected state: ${managerState}`\n    );\n    return false;\n  }\n\n  if (!navigator.gpu) {\n    console.error(\"[ASR Manager] createWorker: WebGPU not supported.\");\n    setManagerState(\"error\", \"WebGPU not supported\");\n    return false;\n  }\n\n  setManagerState(\"initializing\", \"Creating ASR Worker...\");\n\n  try {\n    if (currentWorkerUrl) {\n      URL.revokeObjectURL(currentWorkerUrl);\n      currentWorkerUrl = null;\n    }\n    worker = fromScriptText(WorkerCode, {});\n    currentWorkerUrl = (worker as any).objectURL;\n\n    worker.onmessage = (e: MessageEvent<WorkerResponse>) => {\n      const { status, data, ...rest } = e.data;\n      console.log(\"[ASR Manager] Received message from worker:\", e.data);\n\n      switch (status) {\n        case \"loading\":\n          // Worker sends progress messages during model download\n          setManagerState(\"loading_model\", data || \"Loading model...\");\n          break;\n        case \"ready\":\n          // Worker signals model is loaded and warmed up\n          setManagerState(\"ready\");\n          break;\n        case \"error\":\n          console.error(\n            \"[ASR Manager] Received error status from Worker:\",\n            data\n          );\n          cleanupWorker(data || \"Unknown worker error\");\n          break;\n        case \"transcribing_start\":\n        case \"update\":\n        case \"complete\":\n          // Result-related statuses are dispatched via asrResult\n          document.dispatchEvent(\n            new CustomEvent<AsrResultDetail>(\"asrResult\", {\n              detail: { status, ...rest, data },\n            })\n          );\n          break;\n        default:\n          console.warn(\n            \"[ASR Manager] Received unknown status from worker:\",\n            status\n          );\n          break;\n      }\n    };\n\n    worker.onerror = (err: ErrorEvent) => {\n      console.error(\n        \"[ASR Manager] Unhandled Worker Error event:\",\n        err.message,\n        err\n      );\n      cleanupWorker(err.message || \"Unhandled worker error\");\n    };\n\n    console.log(\n      \"[ASR Manager] Worker instance created, sending initial load message.\"\n    );\n    const initialMessage: WorkerMessage = { type: \"load\" };\n    worker.postMessage(initialMessage);\n    // State is already 'initializing', worker onmessage will update state further\n    return true;\n  } catch (error: any) {\n    console.error(\"[ASR Manager] Failed to instantiate worker:\", error);\n    cleanupWorker(`Failed to create worker: ${error.message || error}`);\n    return false;\n  }\n}\n\n/**\n * Checks WebGPU support and sets initial state. Does not load the worker.\n */\nexport function initializeASRSystem(): void {\n  console.log(\n    \"[ASR Manager] initializeASRSystem called (passive initialization).\"\n  );\n  if (managerState !== \"uninitialized\") {\n    console.log(\"[ASR Manager] Already initialized or initializing.\");\n    return;\n  }\n\n  if (!navigator.gpu) {\n    console.warn(\"[ASR Manager] WebGPU not supported. ASR will be disabled.\");\n    setManagerState(\"error\", \"WebGPU not supported\");\n  } else {\n    console.log(\n      \"[ASR Manager] WebGPU supported. ASR state remains 'uninitialized'.\"\n    );\n    // Explicitly set state (even if it's the same) to ensure event dispatch if needed\n    // setManagerState(\"uninitialized\"); // This might be redundant if default is handled\n  }\n}\n\n/**\n * Called by UI elements to trigger the actual ASR worker creation\n * and model loading if it hasn't happened yet.\n */\nexport function triggerASRInitialization(): void {\n  console.log(\n    \"[ASR Manager] triggerASRInitialization called. Current state:\",\n    managerState\n  );\n  if (managerState === \"uninitialized\" || managerState === \"error\") {\n    console.log(\"[ASR Manager] Triggering worker creation...\");\n    createWorker();\n  } else {\n    console.log(\n      \"[ASR Manager] Initialization trigger ignored, state is:\",\n      managerState\n    );\n  }\n}\n\n/**\n * Sends audio data to the worker for transcription if the worker is ready.\n * @param audioData The Float32Array containing the audio samples.\n * @param language The target language for transcription.\n */\nexport function requestTranscription(\n  audioData: Float32Array,\n  language: string\n): void {\n  console.log(\n    \"[ASR Manager] requestTranscription called. Current state:\",\n    managerState\n  );\n  if (managerState === \"ready\" && worker) {\n    console.log(\"[ASR Manager] Worker is ready, posting generate message.\");\n    const message: WorkerMessage = {\n      type: \"generate\",\n      data: {\n        audio: audioData,\n        language: language,\n      },\n    };\n    worker.postMessage(message);\n  } else {\n    console.warn(\n      `[ASR Manager] Transcription requested but manager state is '${managerState}'. Ignoring.`\n    );\n    if (!worker) {\n      console.error(\n        \"[ASR Manager] Worker instance is null, cannot transcribe.\"\n      );\n    }\n  }\n}\n\n/** Checks if the ASR manager is in a ready state for transcription tasks. */\nexport function isWorkerReady(): boolean {\n  return managerState === \"ready\";\n}\n\n/** Gets the current manager state enum value. */\nexport function getManagerState(): AsrManagerState {\n  return managerState;\n}\n\n/** Gets the current manager state message. */\nexport function getManagerMessage(): string {\n  return managerMessage;\n}\n\n/**\n * Sends a message to the worker to stop the current transcription.\n */\nexport function stopWorkerTranscription(): void {\n  console.log(\n    \"[ASR Manager] stopWorkerTranscription called. Current state:\",\n    managerState\n  );\n  if (worker) {\n    console.log(\"[ASR Manager] Sending stop message to worker.\");\n    const stopMessage: WorkerMessage = { type: \"stop\" };\n    worker.postMessage(stopMessage);\n  } else {\n    console.warn(\n      \"[ASR Manager] Cannot send stop message: Worker does not exist.\"\n    );\n  }\n}\n", "export const HUGGING_FACE_TRANSFORMERS_VERSION = \"3.5.0\"; // Or latest compatible\nexport const TARGET_SAMPLE_RATE = 16000; // Whisper expects 16kHz\nexport const MAX_NEW_TOKENS = 128; // Max tokens for ASR output\n", "/**\n * Centralized DOM selectors for ASR UI components.\n * Update these in one place if the DOM structure changes.\n */\nexport const DOM_SELECTORS = {\n  micButton: \".mic-btn[data-asr-init]\",\n  chatInputContentEditable: \".aislash-editor-input[contenteditable='true']\",\n  fullInputBox: \".full-input-box\",\n  buttonContainer: \".button-container.composer-button-area\",\n};\n", "import { TARGET_SAMPLE_RATE } from \"../config\";\n\n/**\n * Processes an audio Blob, decodes it, and resamples it to the target sample rate if necessary.\n * Returns a mono Float32Array suitable for the ASR model.\n *\n * @param blob The input audio Blob.\n * @param targetSr The target sample rate (default: TARGET_SAMPLE_RATE).\n * @returns A Promise that resolves to a Float32Array or null if processing fails.\n */\nexport async function processAudioBlob(\n  blob: Blob | null,\n  targetSr: number = TARGET_SAMPLE_RATE\n): Promise<Float32Array | null> {\n  if (!blob || blob.size === 0) return null;\n\n  // Correctly reference AudioContext\n  const AudioContext = window.AudioContext;\n  if (!AudioContext) {\n    console.error(\"Browser does not support AudioContext.\");\n    return null;\n  }\n  const audioContext = new AudioContext();\n\n  try {\n    const arrayBuffer = await blob.arrayBuffer();\n    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n    if (audioBuffer.sampleRate === targetSr) {\n      // No resampling needed\n      await audioContext.close(); // Close context when done\n      // Ensure mono by taking the first channel\n      return audioBuffer.getChannelData(0);\n    }\n\n    // Resampling needed\n    console.log(`Resampling from ${audioBuffer.sampleRate}Hz to ${targetSr}Hz`);\n    const duration = audioBuffer.duration;\n    const offlineContext = new OfflineAudioContext(\n      1, // Mono\n      Math.ceil(duration * targetSr), // Calculate output buffer size correctly\n      targetSr\n    );\n    const bufferSource = offlineContext.createBufferSource();\n    bufferSource.buffer = audioBuffer;\n    bufferSource.connect(offlineContext.destination);\n    bufferSource.start();\n\n    const resampledBuffer = await offlineContext.startRendering();\n    await audioContext.close(); // Close original context\n    return resampledBuffer.getChannelData(0); // Return Float32Array of the first (only) channel\n  } catch (error) {\n    console.error(\"Audio processing failed:\", error);\n    if (audioContext && audioContext.state !== \"closed\") {\n      await audioContext.close();\n    }\n    return null;\n  }\n}\n", "import * as CONFIG from \"../config\";\n\n// --- Constants ---\nconst LOCAL_STORAGE_KEY = \"asr_selected_language\";\nconst CONTEXT_MENU_ID = \"asr-language-context-menu\";\n\n// --- Supported Languages ---\n// Updated based on the provided list\n// https://github.com/openai/whisper/blob/248b6cb124225dd263bb9bd32d060b6517e067f8/whisper/tokenizer.py#L79\nexport const SUPPORTED_LANGUAGES = [\n  { code: \"en\", name: \"English\" },\n  { code: \"zh\", name: \"Chinese\" },\n  { code: \"de\", name: \"German\" },\n  { code: \"es\", name: \"Spanish\" },\n  { code: \"ru\", name: \"Russian\" },\n  { code: \"ko\", name: \"Korean\" },\n  { code: \"fr\", name: \"French\" },\n  { code: \"ja\", name: \"Japanese\" },\n  { code: \"pt\", name: \"Portuguese\" },\n  { code: \"tr\", name: \"Turkish\" },\n  { code: \"pl\", name: \"Polish\" },\n  { code: \"ca\", name: \"Catalan\" },\n  { code: \"nl\", name: \"Dutch\" },\n  { code: \"ar\", name: \"Arabic\" },\n  { code: \"sv\", name: \"Swedish\" },\n  { code: \"it\", name: \"Italian\" },\n  { code: \"id\", name: \"Indonesian\" },\n  { code: \"hi\", name: \"Hindi\" },\n  { code: \"fi\", name: \"Finnish\" },\n  { code: \"vi\", name: \"Vietnamese\" },\n  { code: \"he\", name: \"Hebrew\" },\n  { code: \"uk\", name: \"Ukrainian\" },\n  { code: \"el\", name: \"Greek\" },\n  { code: \"ms\", name: \"Malay\" },\n  { code: \"cs\", name: \"Czech\" },\n  { code: \"ro\", name: \"Romanian\" },\n  { code: \"da\", name: \"Danish\" },\n  { code: \"hu\", name: \"Hungarian\" },\n  { code: \"ta\", name: \"Tamil\" },\n  { code: \"no\", name: \"Norwegian\" },\n  { code: \"th\", name: \"Thai\" },\n  { code: \"ur\", name: \"Urdu\" },\n  { code: \"hr\", name: \"Croatian\" },\n  { code: \"bg\", name: \"Bulgarian\" },\n  { code: \"lt\", name: \"Lithuanian\" },\n  { code: \"la\", name: \"Latin\" },\n  { code: \"mi\", name: \"Maori\" },\n  { code: \"ml\", name: \"Malayalam\" },\n  { code: \"cy\", name: \"Welsh\" },\n  { code: \"sk\", name: \"Slovak\" },\n  { code: \"te\", name: \"Telugu\" },\n  { code: \"fa\", name: \"Persian\" },\n  { code: \"lv\", name: \"Latvian\" },\n  { code: \"bn\", name: \"Bengali\" },\n  { code: \"sr\", name: \"Serbian\" },\n  { code: \"az\", name: \"Azerbaijani\" },\n  { code: \"sl\", name: \"Slovenian\" },\n  { code: \"kn\", name: \"Kannada\" },\n  { code: \"et\", name: \"Estonian\" },\n  { code: \"mk\", name: \"Macedonian\" },\n  { code: \"br\", name: \"Breton\" },\n  { code: \"eu\", name: \"Basque\" },\n  { code: \"is\", name: \"Icelandic\" },\n  { code: \"hy\", name: \"Armenian\" },\n  { code: \"ne\", name: \"Nepali\" },\n  { code: \"mn\", name: \"Mongolian\" },\n  { code: \"bs\", name: \"Bosnian\" },\n  { code: \"kk\", name: \"Kazakh\" },\n  { code: \"sq\", name: \"Albanian\" },\n  { code: \"sw\", name: \"Swahili\" },\n  { code: \"gl\", name: \"Galician\" },\n  { code: \"mr\", name: \"Marathi\" },\n  { code: \"pa\", name: \"Punjabi\" },\n  { code: \"si\", name: \"Sinhala\" },\n  { code: \"km\", name: \"Khmer\" },\n  { code: \"sn\", name: \"Shona\" },\n  { code: \"yo\", name: \"Yoruba\" },\n  { code: \"so\", name: \"Somali\" },\n  { code: \"af\", name: \"Afrikaans\" },\n  { code: \"oc\", name: \"Occitan\" },\n  { code: \"ka\", name: \"Georgian\" },\n  { code: \"be\", name: \"Belarusian\" },\n  { code: \"tg\", name: \"Tajik\" },\n  { code: \"sd\", name: \"Sindhi\" },\n  { code: \"gu\", name: \"Gujarati\" },\n  { code: \"am\", name: \"Amharic\" },\n  { code: \"yi\", name: \"Yiddish\" },\n  { code: \"lo\", name: \"Lao\" },\n  { code: \"uz\", name: \"Uzbek\" },\n  { code: \"fo\", name: \"Faroese\" },\n  { code: \"ht\", name: \"Haitian Creole\" },\n  { code: \"ps\", name: \"Pashto\" },\n  { code: \"tk\", name: \"Turkmen\" },\n  { code: \"nn\", name: \"Nynorsk\" },\n  { code: \"mt\", name: \"Maltese\" },\n  { code: \"sa\", name: \"Sanskrit\" },\n  { code: \"lb\", name: \"Luxembourgish\" },\n  { code: \"my\", name: \"Myanmar\" },\n  { code: \"bo\", name: \"Tibetan\" },\n  { code: \"tl\", name: \"Tagalog\" },\n  { code: \"mg\", name: \"Malagasy\" },\n  { code: \"as\", name: \"Assamese\" },\n  { code: \"tt\", name: \"Tatar\" },\n  { code: \"haw\", name: \"Hawaiian\" },\n  { code: \"ln\", name: \"Lingala\" },\n  { code: \"ha\", name: \"Hausa\" },\n  { code: \"ba\", name: \"Bashkir\" },\n  { code: \"jw\", name: \"Javanese\" },\n  { code: \"su\", name: \"Sundanese\" },\n].toSorted((a, b) => a.name.localeCompare(b.name));\n\nexport type LanguageCode = (typeof SUPPORTED_LANGUAGES)[number][\"code\"];\n\n// --- Language Persistence ---\n\n/**\n * Retrieves the currently selected ASR language from localStorage.\n * Falls back to the default language specified in config.ts if none is set.\n *\n * @returns The selected language code.\n */\nexport function getSelectedLanguage(): LanguageCode {\n  try {\n    const storedLanguage = localStorage.getItem(LOCAL_STORAGE_KEY);\n    // Validate if the stored language is one of the supported ones\n    if (\n      storedLanguage &&\n      SUPPORTED_LANGUAGES.some((lang) => lang.code === storedLanguage)\n    ) {\n      return storedLanguage as LanguageCode;\n    }\n  } catch (error) {\n    console.error(\"Error reading language from localStorage:\", error);\n  }\n  // Fallback to english\n  return \"en\";\n}\n\n/**\n * Stores the selected ASR language in localStorage.\n *\n * @param languageCode The language code to store.\n */\nexport function setSelectedLanguage(languageCode: LanguageCode): void {\n  try {\n    // Ensure the language is supported before storing\n    if (SUPPORTED_LANGUAGES.some((lang) => lang.code === languageCode)) {\n      localStorage.setItem(LOCAL_STORAGE_KEY, languageCode);\n      console.log(`ASR language set to: ${languageCode}`);\n    } else {\n      console.warn(`Attempted to set unsupported language: ${languageCode}`);\n    }\n  } catch (error) {\n    console.error(\"Error writing language to localStorage:\", error);\n  }\n}\n\n// --- Context Menu Creation and Handling ---\n\n/**\n * Removes any existing context menu from the DOM.\n */\nfunction removeExistingContextMenu(): void {\n  const existingMenu = document.getElementById(CONTEXT_MENU_ID);\n  existingMenu?.remove();\n  // Remove the global click listener when the menu is removed\n  document.removeEventListener(\"click\", handleOutsideClick, true);\n}\n\n/**\n * Handles clicks outside the context menu to close it.\n * Must be captured phase (`true`) to preempt clicks on menu items.\n */\nfunction handleOutsideClick(event: MouseEvent): void {\n  const menu = document.getElementById(CONTEXT_MENU_ID);\n  if (menu && !menu.contains(event.target as Node)) {\n    removeExistingContextMenu();\n  }\n}\n\n/**\n * Creates and displays the language selection context menu.\n *\n * @param targetElement The HTML element (e.g., the mic button) to position the menu relative to.\n * @param onSelect Callback function triggered when a language is selected. Receives the language code.\n */\nexport function createLanguageContextMenu(\n  targetElement: HTMLElement,\n  onSelect: (languageCode: LanguageCode) => void\n): void {\n  // Remove any previous menu first\n  removeExistingContextMenu();\n\n  const currentLanguage = getSelectedLanguage();\n\n  const menu = document.createElement(\"div\");\n  menu.id = CONTEXT_MENU_ID;\n  menu.className = \"asr-context-menu\"; // Add class for styling\n  menu.style.position = \"absolute\";\n  // Position off-screen initially to measure\n  menu.style.visibility = \"hidden\";\n  menu.style.top = \"-10000px\";\n  menu.style.left = \"-10000px\";\n  menu.style.zIndex = \"10000\"; // Ensure it's on top\n\n  const title = document.createElement(\"div\");\n  title.className = \"asr-context-menu-title\";\n  title.textContent = \"Select Language\";\n  menu.appendChild(title);\n\n  SUPPORTED_LANGUAGES.forEach((lang) => {\n    const item = document.createElement(\"div\");\n    item.className = \"asr-context-menu-item\";\n    item.textContent = lang.name;\n    item.dataset.langCode = lang.code; // Store code for easy access\n\n    if (lang.code === currentLanguage) {\n      item.classList.add(\"selected\"); // Highlight current selection\n    }\n\n    item.addEventListener(\"click\", (e) => {\n      e.stopPropagation(); // Prevent outside click handler\n      const selectedCode = (e.target as HTMLElement).dataset\n        .langCode as LanguageCode;\n      if (selectedCode) {\n        onSelect(selectedCode);\n      }\n      removeExistingContextMenu(); // Close menu after selection\n    });\n\n    menu.appendChild(item);\n  });\n\n  // Append to body to measure dimensions\n  document.body.appendChild(menu);\n\n  // Get dimensions after rendering (while hidden)\n  const menuWidth = menu.offsetWidth;\n  const menuHeight = menu.offsetHeight;\n  const targetRect = targetElement.getBoundingClientRect();\n\n  // Calculate position: centered above the target element\n  const verticalOffset = 5; // Small gap above the button\n  const finalTop =\n    targetRect.top - menuHeight - verticalOffset + window.scrollY; // Adjust for scroll\n  const finalLeft =\n    targetRect.left + targetRect.width / 2 - menuWidth / 2 + window.scrollX; // Adjust for scroll\n\n  // Apply calculated position and make visible\n  menu.style.top = `${finalTop}px`;\n  menu.style.left = `${finalLeft}px`;\n  menu.style.visibility = \"visible\";\n\n  // Add a listener to close the menu when clicking outside\n  // Use capture phase to catch clicks before they bubble up\n  // Use setTimeout to allow the current event cycle to complete before adding listener\n  setTimeout(() => {\n    document.addEventListener(\"click\", handleOutsideClick, true);\n  }, 0);\n}\n\n// --- Basic Styling (Inject into the main styles later if preferred) ---\n// Removed injectContextMenuStyles function as styles are now in styles.css\n", ".sv-wrap {\n  width: 0;\n  height: 24px;\n  opacity: 0;\n  overflow: hidden;\n  transition: width 0.3s ease, opacity 0.3s ease;\n  margin-right: 2px;\n  border-radius: 4px;\n  vertical-align: middle;\n  display: inline-block;\n  position: relative;\n  mask-image: linear-gradient(\n    to right,\n    transparent 0,\n    black 10px,\n    black calc(100% - 10px),\n    transparent 100%\n  );\n}\n.mic-btn {\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 10px;\n  transition: background 0.2s, color 0.2s;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  vertical-align: middle;\n  position: relative;\n  color: #888;\n}\n.mic-btn:hover {\n  background: rgba(0, 0, 0, 0.05);\n  color: #555;\n}\n.mic-btn.active {\n  color: #e66;\n  background: rgba(255, 100, 100, 0.1);\n}\n.mic-btn.transcribing {\n  color: #0cf;\n  background: rgba(0, 200, 255, 0.1);\n}\n.mic-btn.disabled {\n  cursor: not-allowed;\n  color: #bbb;\n  background: transparent !important;\n}\n@keyframes sv-spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n.mic-spinner {\n  width: 12px;\n  height: 12px;\n  border: 2px solid rgba(0, 0, 0, 0.2);\n  border-top-color: #0cf;\n  border-radius: 10px;\n  animation: sv-spin 1s linear infinite;\n}\n.mic-btn.disabled .mic-spinner {\n  border-top-color: #ccc;\n}\n.mic-btn.transcribing .mic-spinner {\n  border-top-color: #0cf;\n}\n.mic-btn .status-tooltip {\n  visibility: hidden;\n  width: 120px;\n  background-color: #555;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 3px;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -60px;\n  opacity: 0;\n  transition: opacity 0.3s;\n  font-size: 10px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 120px;\n}\n.mic-btn .status-tooltip::after {\n  content: \"\";\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: #555 transparent transparent transparent;\n}\n.mic-btn:hover .status-tooltip,\n.mic-btn.disabled .status-tooltip {\n  visibility: visible;\n  opacity: 1;\n}\n/* Styles for the cancel button - mimicking mic-btn but red */\n.sv-cancel-btn {\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 50%;\n  transition: background 0.2s, color 0.2s;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  vertical-align: middle;\n  color: #e66;\n  margin-right: 2px;\n}\n.sv-cancel-btn:hover {\n  background: rgba(255, 100, 100, 0.1);\n  color: #c33; /* Darker red on hover */\n}\n/* Styles for transcribing state controls */\n.transcribe-controls {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 4px;\n}\n.stop-btn-style {\n  color: #e66;\n  cursor: pointer;\n  font-size: 10px;\n}\n\n/* --- Context Menu Styles --- */\n.asr-context-menu {\n  position: absolute; /* Ensure position is set */\n  z-index: 10000; /* Ensure it's on top */\n  background-color: var(--vscode-menu-background, #252526);\n  border: 1px solid var(--vscode-menu-border, #3c3c3c);\n  color: var(--vscode-menu-foreground, #cccccc);\n  min-width: 150px;\n  max-width: 250px; /* Optional: Prevent excessive width */\n  max-height: 40vh; /* Limit height to 40% of viewport height */\n  overflow-y: auto; /* Enable vertical scrolling */\n  overflow-x: hidden; /* Prevent horizontal scrolling */\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n  padding: 4px 0;\n  border-radius: 4px;\n  font-family: var(--vscode-font-family, Arial, sans-serif);\n  font-size: var(--vscode-font-size, 13px);\n}\n.asr-context-menu-title {\n  padding: 4px 8px;\n  font-weight: bold;\n  opacity: 0.7;\n  border-bottom: 1px solid var(--vscode-menu-separatorBackground, #454545);\n  margin-bottom: 4px;\n  pointer-events: none; /* Don't intercept clicks */\n}\n.asr-context-menu-item {\n  padding: 4px 12px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n.asr-context-menu-item:hover {\n  background-color: var(--vscode-menu-selectionBackground, #04395e);\n  color: var(--vscode-menu-selectionForeground, #ffffff);\n}\n.asr-context-menu-item.selected {\n  font-weight: bold;\n  /* Optional: Add a checkmark or other indicator */\n  /* Example: Use a ::before pseudo-element */\n}\n.asr-context-menu-item.selected::before {\n  content: \"\u2713 \";\n  margin-right: 4px;\n}\n\n/* --- Custom Scrollbar for Context Menu --- */\n.asr-context-menu::-webkit-scrollbar {\n  width: 6px; /* Thinner scrollbar */\n}\n\n.asr-context-menu::-webkit-scrollbar-track {\n  background: var(\n    --vscode-menu-background,\n    #252526\n  ); /* Match menu background */\n  border-radius: 3px;\n}\n\n.asr-context-menu::-webkit-scrollbar-thumb {\n  background-color: var(\n    --vscode-scrollbarSlider-background,\n    #4d4d4d\n  ); /* Subtle thumb color */\n  border-radius: 3px;\n  border: 1px solid var(--vscode-menu-background, #252526); /* Creates a small border effect */\n}\n\n.asr-context-menu::-webkit-scrollbar-thumb:hover {\n  background-color: var(\n    --vscode-scrollbarSlider-hoverBackground,\n    #6b6b6b\n  ); /* Darker on hover */\n}\n\n/* Firefox scrollbar styling */\n.asr-context-menu {\n  scrollbar-width: thin; /* Use thin scrollbar */\n  scrollbar-color: var(--vscode-scrollbarSlider-background, #4d4d4d)\n    var(--vscode-menu-background, #252526); /* thumb track */\n}\n", "import {\n  getManagerMessage,\n  getManagerState,\n  isWorkerReady,\n  requestTranscription,\n  stopWorkerTranscription,\n  triggerASRInitialization,\n} from \"../asr/manager\";\nimport { getCurrentAsrInstance, setCurrentAsrInstance } from \"../asr/instance\";\nimport { processAudioBlob } from \"../audio/processing\";\nimport * as CONFIG from \"../config\";\nimport type {\n  AsrStatusUpdateDetail,\n  MicButtonElement,\n  MicButtonState,\n  AsrManagerState,\n} from \"../types\";\nimport {\n  createLanguageContextMenu,\n  getSelectedLanguage,\n  setSelectedLanguage,\n} from \"./context-menu\";\nimport { DOM_SELECTORS } from \"./dom-selectors\";\nimport styles from \"inline:../styles/styles.css\";\n\n// --- Shared CSS Injection ---\nconst styleId = \"fadein-width-bar-wave-styles\";\nfunction injectGlobalStyles(): void {\n  if (!document.getElementById(styleId)) {\n    const s = document.createElement(\"style\");\n    s.id = styleId;\n    s.textContent = styles;\n    document.head.appendChild(s);\n  }\n}\n\n// --- Mic Button State Update ---\nexport function updateMicButtonState(\n  button: MicButtonElement | null,\n  newState: MicButtonState,\n  message: string = \"\"\n): void {\n  if (!button) return;\n\n  // Read the *global* ASR state and message from the manager\n  const actualAsrState = getManagerState();\n  const actualAsrMessage = getManagerMessage();\n\n  // Determine the effective state for the UI based on global state\n  let effectiveState: MicButtonState | \"loading\" | \"uninitialized\" = newState;\n  let displayMessage = message; // Message specifically passed to this function\n\n  // --- State Overrides based on Manager State ---\n  switch (actualAsrState) {\n    case \"uninitialized\":\n      effectiveState = \"uninitialized\";\n      displayMessage = actualAsrMessage || \"Click to initialize\";\n      break;\n    case \"initializing\":\n    case \"loading_model\":\n    case \"warming_up\":\n      effectiveState = \"loading\"; // Treat all loading stages as 'loading' visually\n      displayMessage = actualAsrMessage;\n      break;\n    case \"error\":\n      effectiveState = \"disabled\";\n      displayMessage = `Error: ${actualAsrMessage}`;\n      break;\n    case \"ready\":\n      // If manager is ready, allow the requested newState unless it forces disabled\n      if (newState === \"recording\") {\n        effectiveState = \"recording\";\n        displayMessage = message || \"Recording...\";\n      } else if (newState === \"transcribing\") {\n        effectiveState = \"transcribing\";\n        displayMessage = message || \"Transcribing...\";\n      } else if (newState === \"disabled\") {\n        effectiveState = \"disabled\";\n        displayMessage = message || \"Disabled\";\n      } else {\n        // Default to idle if ready and no other active state requested\n        effectiveState = \"idle\";\n        displayMessage = message;\n      }\n      break;\n    // If managerState is not one of the above, something is wrong, default to disabled?\n    // Or let the initial newState pass through? Let's default to disabled for safety.\n    default:\n      console.warn(\n        `[MicButton] Unexpected manager state: ${actualAsrState}, defaulting UI to disabled.`\n      );\n      effectiveState = \"disabled\";\n      displayMessage = actualAsrMessage || \"ASR not ready\";\n  }\n\n  // Ensure consistency: If the effective state requires ASR readiness (recording, transcribing),\n  // but the manager isn't actually ready (e.g., due to race condition), force disabled.\n  if (\n    (effectiveState === \"recording\" || effectiveState === \"transcribing\") &&\n    actualAsrState !== \"ready\"\n  ) {\n    console.warn(\n      `[MicButton] State mismatch: Requested ${effectiveState} but manager state is ${actualAsrState}. Forcing disabled.`\n    );\n    effectiveState = \"disabled\";\n    displayMessage = actualAsrMessage || \"ASR not ready\";\n  }\n\n  // Update button's internal state marker (used for logic like mouseleave)\n  button.asrState =\n    effectiveState === \"uninitialized\" || effectiveState === \"loading\"\n      ? \"idle\" // Treat loading/uninit as idle internally for logic purposes\n      : (effectiveState as MicButtonState); // Cast: 'idle'|'recording'|'transcribing'|'disabled'\n\n  // Check if we are staying in the loading state and a spinner already exists\n  const alreadyHasSpinner = !!button.querySelector(\".mic-spinner\");\n  const isStayingLoading = effectiveState === \"loading\" && alreadyHasSpinner;\n\n  // Only clear and rebuild if not just updating the message for an existing loading state\n  if (!isStayingLoading) {\n    button.classList.remove(\"active\", \"transcribing\", \"disabled\");\n    button.innerHTML = \"\"; // Clear previous content\n\n    // Create and append the tooltip span first\n    const tooltip = document.createElement(\"span\");\n    tooltip.className = \"status-tooltip\";\n    button.appendChild(tooltip);\n  } else {\n    // If staying loading, ensure tooltip exists\n    let tooltip = button.querySelector<HTMLSpanElement>(\".status-tooltip\");\n    if (!tooltip) {\n      tooltip = document.createElement(\"span\");\n      tooltip.className = \"status-tooltip\";\n      button.appendChild(tooltip); // Append if missing\n    }\n  }\n\n  // Retrieve the potentially recreated/ensured tooltip reference\n  const tooltip = button.querySelector<HTMLSpanElement>(\".status-tooltip\");\n  let iconClass = \"\";\n  let defaultTitle = displayMessage || \"\"; // Use determined display message\n\n  // Handle tooltip visibility\n  if (tooltip) {\n    tooltip.style.display = defaultTitle ? \"block\" : \"none\";\n  }\n\n  // Only execute the switch if we are not just updating the message for loading state\n  if (!isStayingLoading) {\n    switch (effectiveState) {\n      case \"recording\":\n        button.classList.add(\"active\");\n        iconClass = \"codicon-primitive-square\";\n        break;\n      case \"transcribing\":\n        button.classList.add(\"transcribing\");\n        const transcribeControlContainer = document.createElement(\"div\");\n        transcribeControlContainer.className = \"transcribe-controls\";\n        const spinnerT = document.createElement(\"div\");\n        spinnerT.className = \"mic-spinner\";\n        transcribeControlContainer.appendChild(spinnerT);\n        const stopBtn = document.createElement(\"span\");\n        stopBtn.className =\n          \"codicon codicon-x stop-transcription-btn stop-btn-style\";\n        stopBtn.setAttribute(\"title\", \"Stop Transcription\");\n        transcribeControlContainer.appendChild(stopBtn);\n        button.appendChild(transcribeControlContainer);\n        iconClass = \"\"; // No main icon\n        break;\n      case \"loading\":\n        button.classList.add(\"disabled\");\n        if (!button.querySelector(\".mic-spinner\")) {\n          const spinnerL = document.createElement(\"div\");\n          spinnerL.className = \"mic-spinner\";\n          button.appendChild(spinnerL);\n        }\n        iconClass = \"\"; // No main icon\n        break;\n      case \"disabled\":\n        button.classList.add(\"disabled\");\n        if (actualAsrState === \"error\") {\n          iconClass = \"codicon-error\";\n        } else {\n          iconClass = \"codicon-mic-off\"; // Default disabled icon\n        }\n        break;\n      case \"uninitialized\":\n        iconClass = \"codicon-mic\"; // Same as idle visually\n        break;\n      case \"idle\":\n      default:\n        iconClass = \"codicon-mic\";\n        break;\n    }\n\n    if (iconClass) {\n      const icon = document.createElement(\"span\");\n      icon.className = `codicon ${iconClass} !text-[12px]`;\n      // Ensure icon is added correctly relative to the tooltip\n      if (tooltip && tooltip.parentNode === button) {\n        button.insertBefore(icon, tooltip);\n      } else {\n        // Append icon first, then tooltip if it exists\n        button.appendChild(icon);\n        if (tooltip && !button.contains(tooltip)) {\n          button.appendChild(tooltip);\n        }\n      }\n    }\n  } else {\n    // If staying loading, ensure disabled class and update title\n    button.classList.add(\"disabled\");\n  }\n\n  // Update tooltip content and button title attribute (always)\n  if (tooltip) {\n    tooltip.textContent = defaultTitle;\n  }\n  button.setAttribute(\"title\", defaultTitle);\n}\n\n// --- Initialization for each Mic Instance ---\nexport function initWave(box: HTMLElement): void {\n  if (box.dataset.waveInit) return;\n  box.dataset.waveInit = \"1\";\n\n  const area = box.querySelector<HTMLDivElement>(DOM_SELECTORS.buttonContainer);\n  const chatInputContentEditable = box.querySelector<HTMLDivElement>(\n    DOM_SELECTORS.chatInputContentEditable\n  );\n\n  if (!area || !chatInputContentEditable) {\n    console.warn(\n      \"Could not find button area or chatInputContentEditable for\",\n      box\n    );\n    return;\n  }\n\n  // Build DOM\n  const wrap = document.createElement(\"div\");\n  wrap.className = \"sv-wrap\";\n  wrap.style.opacity = \"0\";\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 120;\n  canvas.height = 24;\n  wrap.appendChild(canvas);\n\n  // --- Add cancel button (trash icon) ---\n  const cancelBtn = document.createElement(\"div\"); // Use div for easier styling\n  cancelBtn.className = \"sv-cancel-btn\";\n  cancelBtn.setAttribute(\"title\", \"Cancel and discard recording\");\n  cancelBtn.style.display = \"none\"; // Only show when recording\n  const cancelIcon = document.createElement(\"span\");\n  cancelIcon.className = \"codicon codicon-trash !text-[12px]\";\n  cancelBtn.appendChild(cancelIcon);\n  // ---\n\n  const mic = document.createElement(\"div\") as MicButtonElement;\n  mic.className = \"mic-btn\";\n  mic.dataset.asrInit = \"1\";\n\n  const statusTooltip = document.createElement(\"span\");\n  statusTooltip.className = \"status-tooltip\";\n  mic.appendChild(statusTooltip);\n\n  // Prepend in order: cancel, wrap, mic\n  area.prepend(mic);\n  area.prepend(wrap);\n  area.prepend(cancelBtn);\n\n  // Visualization params\n  const ctx = canvas.getContext(\"2d\");\n  const W = canvas.width,\n    H = canvas.height;\n  const BAR_WIDTH = 2,\n    BAR_GAP = 1,\n    STEP = BAR_WIDTH + BAR_GAP;\n  const SLOTS = Math.floor(W / STEP);\n  const MIN_H = 1,\n    MAX_H = H - 2,\n    SENS = 3.5,\n    SCROLL = 0.5;\n  let amps = new Array(SLOTS).fill(MIN_H);\n  let alphas = new Array(SLOTS).fill(1);\n  let offset = 0;\n\n  // Audio state variables\n  let audioCtx: AudioContext | null = null;\n  let analyser: AnalyserNode | null = null;\n  let dataArr: Uint8Array | null = null;\n  let stream: MediaStream | null = null;\n  let sourceNode: MediaStreamAudioSourceNode | null = null;\n  let raf: number | null = null;\n  let mediaRecorder: MediaRecorder | null = null;\n  let audioChunks: Blob[] = [];\n  let isCancelled = false;\n\n  // Set initial button state based on current global state\n  updateMicButtonState(mic, \"idle\");\n\n  // Listen to global ASR status updates (using AsrStatusUpdateDetail)\n  const handleAsrStatusUpdate = (event: Event) => {\n    const customEvent = event as CustomEvent<AsrStatusUpdateDetail>;\n    console.log(\"[MicButton] ASR Status Update Received:\", customEvent.detail);\n    // Trigger a UI update based on the new global state\n    // Pass the button's current internal state as the base for comparison/override\n    updateMicButtonState(mic, mic.asrState || \"idle\");\n  };\n  document.addEventListener(\n    \"asrStatusUpdate\",\n    handleAsrStatusUpdate as EventListener\n  );\n  // TODO: Add cleanup for this listener if the element is removed\n\n  // --- Internal Helper Functions ---\n  function draw() {\n    if (!analyser || !dataArr || !ctx) return;\n    analyser.getByteTimeDomainData(dataArr);\n    let peak = 0;\n    for (const v of dataArr) peak = Math.max(peak, Math.abs(v - 128) / 128);\n    peak = Math.min(1, peak * SENS);\n    const h = MIN_H + peak * (MAX_H - MIN_H);\n\n    offset += SCROLL;\n    if (offset >= STEP) {\n      offset -= STEP;\n      amps.shift();\n      alphas.shift();\n      amps.push(h);\n      alphas.push(0);\n    }\n\n    ctx.clearRect(0, 0, W, H);\n    ctx.lineWidth = BAR_WIDTH;\n    ctx.lineCap = \"round\";\n\n    for (let i = 0; i < SLOTS; i++) {\n      const barH = amps[i];\n      if (alphas[i] < 1) alphas[i] = Math.min(1, alphas[i] + 0.1);\n      const x = i * STEP - offset + BAR_WIDTH / 2;\n      const y1 = (H - barH) / 2,\n        y2 = y1 + barH;\n      ctx.strokeStyle = \"#0cf\";\n      ctx.globalAlpha = alphas[i];\n      ctx.beginPath();\n      ctx.moveTo(x, y1);\n      ctx.lineTo(x, y2);\n      ctx.stroke();\n    }\n    ctx.globalAlpha = 1;\n    raf = requestAnimationFrame(draw);\n  }\n\n  function stopVisualization() {\n    if (raf !== null) cancelAnimationFrame(raf);\n    raf = null;\n    wrap.style.opacity = \"0\";\n    wrap.style.width = \"0\";\n    setTimeout(() => {\n      // Use mic's internal state, not global status\n      // Linter error fixed here\n      const currentMicState = mic.asrState;\n      if (currentMicState !== \"recording\" && ctx) {\n        ctx.clearRect(0, 0, W, H);\n      }\n    }, 300);\n    amps.fill(MIN_H);\n    alphas.fill(1);\n    offset = 0;\n    sourceNode?.disconnect();\n    analyser = null;\n    sourceNode = null;\n  }\n\n  function stopRecording(forceStop: boolean = false) {\n    // Check the button's *current* visual/intended state, not just manager state\n    const currentMicState = mic.asrState; // Read from the element attribute/property if you store it there\n    if (!forceStop && currentMicState !== \"recording\") return; // Check button's state\n\n    console.log(\"Stopping recording...\");\n    stopVisualization();\n\n    if (mediaRecorder && mediaRecorder.state === \"recording\") {\n      try {\n        mediaRecorder.stop(); // This triggers the onstop handler\n      } catch (e) {\n        console.warn(\"Error stopping MediaRecorder:\", e);\n      }\n    }\n    mediaRecorder = null; // Clear recorder ref *after* stopping\n\n    stream?.getTracks().forEach((track) => track.stop());\n    stream = null;\n\n    audioCtx\n      ?.close()\n      .catch((e) => console.warn(\"Error closing AudioContext:\", e));\n    audioCtx = null;\n\n    cancelBtn.style.display = \"none\"; // Hide cancel when not recording\n\n    // Only update state if forceStop happened without cancellation\n    // The onstop handler will set transcribing/idle otherwise\n    if (forceStop && !isCancelled) {\n      updateMicButtonState(mic, \"idle\", \"Recording stopped\"); // Update state after forced stop\n    }\n    // Don't reset isCancelled here, let onstop handle it\n  }\n\n  // --- startRecording: Now only called when ASR is ready ---\n  function startRecording() {\n    // Assume we are in 'ready' state if this function is called.\n\n    console.log(\n      \"Attempting to start recording (ASR should be ready)...\",\n      getManagerState()\n    );\n    updateMicButtonState(mic, \"recording\"); // Update UI to recording state\n    audioChunks = [];\n    isCancelled = false; // Reset cancel flag for new recording\n\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((ms) => {\n        if (mic.asrState !== \"recording\") {\n          console.warn(\n            \"Mic state changed away from recording during getUserMedia, aborting.\"\n          );\n          ms.getTracks().forEach((track) => track.stop());\n          updateMicButtonState(mic, \"idle\");\n          return;\n        }\n        stream = ms;\n        const AudioContext = window.AudioContext;\n        if (!AudioContext) throw new Error(\"AudioContext not supported\");\n        audioCtx = new AudioContext();\n        analyser = audioCtx.createAnalyser();\n        analyser.fftSize = 1024;\n        analyser.smoothingTimeConstant = 0.6;\n        dataArr = new Uint8Array(analyser.frequencyBinCount);\n        sourceNode = audioCtx.createMediaStreamSource(stream);\n        sourceNode.connect(analyser);\n\n        wrap.style.width = `${SLOTS * STEP}px`;\n        wrap.style.opacity = \"1\";\n        raf = requestAnimationFrame(draw);\n\n        cancelBtn.style.display = \"inline-flex\"; // Show cancel when recording\n\n        try {\n          const mimeTypes = [\n            \"audio/webm;codecs=opus\",\n            \"audio/ogg;codecs=opus\",\n            \"audio/wav\",\n            \"audio/mp4\",\n            \"audio/webm\",\n          ];\n          let selectedMimeType: string | undefined = undefined;\n          for (const mimeType of mimeTypes) {\n            if (MediaRecorder.isTypeSupported(mimeType)) {\n              selectedMimeType = mimeType;\n              break;\n            }\n          }\n          if (!selectedMimeType)\n            console.warn(\"Using browser default MIME type.\");\n\n          mediaRecorder = new MediaRecorder(stream, {\n            mimeType: selectedMimeType,\n          });\n\n          mediaRecorder.ondataavailable = (event: BlobEvent) => {\n            if (event.data.size > 0) audioChunks.push(event.data);\n          };\n\n          // --- mediaRecorder.onstop ---\n          mediaRecorder.onstop = async () => {\n            console.log(\"MediaRecorder stopped. isCancelled:\", isCancelled);\n            cancelBtn.style.display = \"none\"; // Hide cancel button\n\n            if (isCancelled) {\n              console.log(\"Recording was cancelled. Discarding audio chunks.\");\n              audioChunks = []; // Clear chunks\n              updateMicButtonState(mic, \"idle\");\n              isCancelled = false; // Reset flag\n              return; // Don't process cancelled audio\n            }\n\n            // Proceed with processing if not cancelled\n            if (audioChunks.length === 0) {\n              console.log(\"No audio chunks recorded.\");\n              updateMicButtonState(mic, \"idle\", \"No audio recorded\");\n              return;\n            }\n\n            console.log(\"Processing recorded audio chunks...\");\n            updateMicButtonState(mic, \"transcribing\"); // Set state to transcribing\n\n            const audioBlob = new Blob(audioChunks, {\n              type: mediaRecorder?.mimeType || \"audio/webm\",\n            });\n            audioChunks = []; // Clear chunks after creating blob\n\n            try {\n              const float32Array = await processAudioBlob(audioBlob);\n              // Get the currently selected language from localStorage\n              const currentLanguage = getSelectedLanguage();\n              console.log(`Requesting transcription in: ${currentLanguage}`);\n\n              if (float32Array && isWorkerReady()) {\n                updateMicButtonState(mic, \"transcribing\"); // Update message\n                requestTranscription(float32Array, currentLanguage); // Use selected language\n              } else if (!float32Array) {\n                console.error(\"Audio processing failed.\");\n                updateMicButtonState(mic, \"idle\", \"Audio processing failed\");\n              } else {\n                console.error(\"ASR worker not ready for transcription.\");\n                updateMicButtonState(mic, \"idle\", \"ASR worker not ready\");\n              }\n            } catch (procError) {\n              console.error(\"Error processing audio blob:\", procError);\n              updateMicButtonState(mic, \"idle\", \"Error processing audio\");\n            }\n          }; // --- End of onstop ---\n\n          mediaRecorder.onerror = (event: Event) => {\n            console.error(\"MediaRecorder Error:\", (event as ErrorEvent).error);\n            updateMicButtonState(mic, \"idle\", \"Recording error\");\n            stopRecording(true); // Force stop on error\n          };\n\n          mediaRecorder.start();\n          console.log(\"MediaRecorder started.\");\n        } catch (e: unknown) {\n          console.error(\"Failed to create MediaRecorder:\", e);\n          updateMicButtonState(mic, \"idle\", \"Recorder init failed\");\n          stopRecording(true); // Force stop\n        }\n      })\n      .catch((err: Error) => {\n        console.error(\"getUserMedia failed:\", err);\n        let message = \"Mic access denied or failed\";\n        if (err.name === \"NotAllowedError\")\n          message = \"Microphone access denied\";\n        else if (err.name === \"NotFoundError\") message = \"No microphone found\";\n        updateMicButtonState(mic, \"idle\", message); // Update state to idle with error message\n        stopRecording(true); // Ensure cleanup and hide cancel button\n      });\n  }\n\n  // --- Event Listeners ---\n\n  // Mousedown: Trigger initialization or start recording\n  mic.addEventListener(\"click\", (e: MouseEvent) => {\n    if (e.button !== 0) return; // Only left click\n\n    // Set current instance context on any click/mousedown\n    if (chatInputContentEditable) {\n      setCurrentAsrInstance({ mic, chatInputContentEditable });\n    }\n\n    if (mic.asrState === \"recording\") {\n      // If the mic is already recording, stop the recording\n      stopRecording();\n      return;\n    }\n\n    const managerState = getManagerState(); // Check global status from manager\n\n    console.log(\"Mousedown detected. ASR State:\", managerState);\n\n    switch (managerState) {\n      case \"uninitialized\":\n        console.log(\"ASR uninitialized, triggering initialization...\");\n        triggerASRInitialization();\n        updateMicButtonState(mic, \"idle\", \"Initializing...\"); // Update state (will show loading based on global status)\n        break;\n      case \"ready\":\n        console.log(\"ASR ready, starting recording...\");\n        startRecording(); // ASR is ready, proceed to record\n        break;\n      case \"initializing\":\n      case \"loading_model\":\n      case \"warming_up\":\n        console.log(\"ASR is currently loading/initializing. Please wait.\");\n        updateMicButtonState(mic, \"idle\"); // Refresh state to show loading/disabled\n        break;\n      case \"error\":\n        console.warn(\"Cannot start recording, ASR is in error state.\");\n        updateMicButtonState(mic, \"idle\"); // Refresh state to show error\n        break;\n      default:\n        // Handle other states like 'transcribing' - do nothing on mousedown?\n        console.log(\"Mousedown ignored in current state:\", managerState);\n        break;\n    }\n  });\n\n  // Cancel button event (Keep as is)\n  cancelBtn.addEventListener(\"click\", (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (mic.asrState === \"recording\") {\n      // Only act if currently recording\n      console.log(\"Cancel button clicked.\");\n      isCancelled = true;\n      stopRecording(true); // Force stop recording immediately\n      // State is updated within stopRecording/onstop now\n    }\n  });\n\n  // --- Context Menu Listener ---\n  mic.addEventListener(\"contextmenu\", (e: MouseEvent) => {\n    e.preventDefault(); // Prevent default browser menu\n    console.log(\"Right-click detected on mic button.\");\n\n    // Set current instance context if needed (might already be set by mousedown)\n    if (chatInputContentEditable && !getCurrentAsrInstance()) {\n      setCurrentAsrInstance({ mic, chatInputContentEditable });\n    }\n\n    // Create and show the language menu, passing the mic element\n    createLanguageContextMenu(mic, (selectedLang) => {\n      // Pass `mic` element instead of coordinates\n      // This callback runs when a language is selected from the menu\n      setSelectedLanguage(selectedLang); // Persist the choice\n      // Optional: Provide feedback to the user, e.g., update tooltip briefly\n      // updateMicButtonState(mic, \"idle\", `Language set to ${selectedLang}`);\n      // The actual language use happens during `requestTranscription`\n    });\n  });\n  // --------------------------\n}\n\n// --- DOM Observer Setup ---\nexport function setupMicButtonObserver(): void {\n  // Listen for global status updates once at setup, mainly for initial state\n  const handleInitialStatus = (event: Event) => {\n    // Cast to CustomEvent to access detail if needed (optional)\n    const customEvent = event as CustomEvent<AsrStatusUpdateDetail>;\n    const state = customEvent.detail.state; // Use the new state property\n    console.log(\"Observer setup: Received initial ASR state\", state);\n    // Potentially update any existing buttons if needed, though initWave handles new ones\n    document\n      .querySelectorAll<HTMLElement>(DOM_SELECTORS.fullInputBox)\n      .forEach((el) => {\n        const mic = el.querySelector<MicButtonElement>(\".mic-btn\");\n        if (mic && mic.dataset.waveInit) {\n          // Only update if already initialized by initWave\n          updateMicButtonState(mic, mic.asrState || \"idle\");\n        }\n      });\n  };\n  document.addEventListener(\n    \"asrStatusUpdate\",\n    handleInitialStatus as EventListener,\n    {\n      once: true,\n    }\n  );\n\n  const obs = new MutationObserver((records) => {\n    records.forEach((r) => {\n      r.addedNodes.forEach((n) => {\n        if (n instanceof HTMLElement) {\n          if (n.matches(DOM_SELECTORS.fullInputBox)) {\n            initWave(n);\n          }\n          n.querySelectorAll<HTMLElement>(DOM_SELECTORS.fullInputBox).forEach(\n            (el) => {\n              // Check if already initialized to prevent duplicate listeners/DOM elements\n              if (!el.querySelector('.mic-btn[data-wave-init=\"1\"]')) {\n                initWave(el);\n              }\n            }\n          );\n        }\n      });\n      // Optional: Handle node removal for cleanup (remove event listeners)\n      // r.removedNodes.forEach(n => { ... });\n    });\n  });\n  obs.observe(document.documentElement, { childList: true, subtree: true });\n\n  // Initialize existing elements on load\n  document\n    .querySelectorAll<HTMLElement>(DOM_SELECTORS.fullInputBox)\n    .forEach((el) => {\n      if (!el.querySelector('.mic-btn[data-wave-init=\"1\"]')) {\n        initWave(el);\n      }\n    });\n\n  // Inject styles once\n  injectGlobalStyles();\n}\n", "import { getCurrentAsrInstance, setCurrentAsrInstance } from \"./asr/instance\";\nimport { initializeASRSystem } from \"./asr/manager\";\nimport * as CONFIG from \"./config\";\nimport type {\n  AsrResultDetail,\n  AsrStatusUpdateDetail,\n  MicButtonElement,\n  MicButtonState,\n  AsrManagerState,\n} from \"./types\";\nimport { DOM_SELECTORS } from \"./ui/dom-selectors\";\nimport { setupMicButtonObserver, updateMicButtonState } from \"./ui/mic-button\";\n\n// Define navigator with gpu property\ninterface NavigatorWithGPU extends Navigator {\n  gpu?: unknown;\n}\ndeclare const navigator: NavigatorWithGPU;\n\n(function () {\n  \"use strict\";\n\n  setCurrentAsrInstance(null);\n\n  // --- Check WebGPU Support ---\n  if (!navigator.gpu) {\n    console.warn(\"WebGPU not supported on this browser. ASR will not work.\");\n  }\n\n  // --- Load Transformers.js dynamically ---\n  let transformersLibLoaded = typeof window.transformers !== \"undefined\";\n\n  if (!transformersLibLoaded && typeof require !== \"undefined\") {\n    const scriptId = \"hf-transformers-script\";\n    if (!document.getElementById(scriptId)) {\n      console.log(\"Loading Hugging Face Transformers library...\");\n      const script = document.createElement(\"script\");\n      script.id = scriptId;\n      script.type = \"module\";\n      script.textContent = `\n              console.log('[ASR] Injected script block executing...');\n              console.log('[ASR] Attempting to load Transformers library...');\n              try {\n                  const { ${[\n                    \"AutoTokenizer\",\n                    \"AutoProcessor\",\n                    \"WhisperForConditionalGeneration\",\n                    \"TextStreamer\",\n                    \"full\",\n                    \"env\",\n                  ].join(\n                    \",\"\n                  )} } = await import('https://cdn.jsdelivr.net/npm/@huggingface/transformers@${\n        CONFIG.HUGGING_FACE_TRANSFORMERS_VERSION\n      }');\n                  console.log('[ASR] Transformers library imported successfully.');\n                  window.transformers = { AutoTokenizer, AutoProcessor, WhisperForConditionalGeneration, TextStreamer, full, env };\n                  window.transformers.env.backends.onnx.logLevel = 'info';\n                  console.log('[ASR] Transformers library loaded and configured.');\n                  document.dispatchEvent(new CustomEvent('transformersLoaded'));\n              } catch (error) {\n                  console.error(\"[ASR] Failed to load Hugging Face Transformers library:\", error);\n              }\n          `;\n      document.head.appendChild(script);\n    }\n  } else if (transformersLibLoaded && window.transformers) {\n    window.transformers.env.backends.onnx.logLevel = \"info\";\n  }\n\n  console.log(\"Initializing ASR system...\");\n  initializeASRSystem();\n  console.log(\"ASR system initialized\");\n\n  // --- Global ASR Status Listener (Updated) ---\n  document.addEventListener(\"asrStatusUpdate\", (e: Event) => {\n    const event = e as CustomEvent<AsrStatusUpdateDetail>;\n    const managerState = event.detail.state;\n    const message = event.detail.message;\n    console.log(\n      `[ASR] Received asrStatusUpdate: State=${managerState}, Msg=${message}`\n    );\n\n    let targetMicState: MicButtonState;\n    switch (managerState) {\n      case \"uninitialized\":\n      case \"ready\":\n      case \"error\":\n        targetMicState = \"idle\";\n        break;\n      case \"initializing\":\n      case \"loading_model\":\n      case \"warming_up\":\n        targetMicState = \"disabled\";\n        break;\n      default:\n        console.warn(\n          \"[ASR] Unhandled manager state in status listener:\",\n          managerState\n        );\n        targetMicState = \"idle\";\n    }\n\n    if (managerState === \"error\") {\n      console.error(\n        \"[ASR System Error]:\",\n        message || \"Unknown ASR system error\"\n      );\n    }\n\n    document\n      .querySelectorAll<MicButtonElement>(\".mic-btn[data-asr-init]\")\n      .forEach((btn) => {\n        if (btn.asrState !== targetMicState) {\n          updateMicButtonState(btn, targetMicState);\n        }\n      });\n  });\n\n  // --- Global ASR Result Handler ---\n  if (!window._asrGlobalHandlerAttached) {\n    let buffer = \"\";\n    function globalAsrResultHandler(e: Event) {\n      const event = e as CustomEvent<AsrResultDetail>;\n      const { status, output = \"\", data } = event.detail;\n\n      const asrInstance = getCurrentAsrInstance();\n      if (!asrInstance) return;\n      const { mic, chatInputContentEditable } = asrInstance;\n      const currentMicState = mic.asrState;\n\n      if (status === \"transcribing_start\") {\n        updateMicButtonState(mic, \"transcribing\");\n      } else if (status === \"update\") {\n        buffer += output;\n        if (currentMicState !== \"transcribing\") {\n          updateMicButtonState(mic, \"transcribing\");\n        }\n      } else if (status === \"complete\") {\n        updateReactInput(chatInputContentEditable, buffer, false);\n        buffer = \"\";\n        updateMicButtonState(mic, \"idle\");\n        chatInputContentEditable.focus();\n      } else if (status === \"error\") {\n        console.error(\"Transcription error:\", data);\n        updateMicButtonState(\n          mic,\n          \"idle\",\n          `Error: ${data || \"Unknown transcription error\"}`\n        );\n      }\n    }\n    document.addEventListener(\"asrResult\", globalAsrResultHandler);\n    window._asrGlobalHandlerAttached = true;\n  }\n\n  // --- Setup UI ---\n  setupMicButtonObserver();\n\n  const mic = document.querySelector<MicButtonElement>(DOM_SELECTORS.micButton);\n  const chatInputContentEditable = document.querySelector<HTMLDivElement>(\n    DOM_SELECTORS.fullInputBox\n  );\n  if (mic && chatInputContentEditable) {\n    setCurrentAsrInstance({ mic, chatInputContentEditable });\n  }\n\n  /**\n   * Updates a React-controlled input by either replacing or appending text\n   * @param element The input element to update\n   * @param text The text to set/append\n   * @param shouldReplace Whether to replace existing text (true) or append (false)\n   */\n  function updateReactInput(\n    element: HTMLElement,\n    text: string,\n    shouldReplace: boolean = false\n  ) {\n    if (text === \"\") {\n      return;\n    }\n\n    element.focus();\n\n    if (shouldReplace) {\n      if (element.textContent === text) {\n        return;\n      }\n\n      const selection = window.getSelection();\n      const range = document.createRange();\n\n      range.selectNodeContents(element);\n      selection?.removeAllRanges();\n      selection?.addRange(range);\n\n      document.execCommand(\"insertText\", false, text);\n    } else {\n      const currentContent = element.textContent?.trim() || \"\";\n      let textToAppend = text;\n\n      if (currentContent.length > 0 && !text.startsWith(\" \")) {\n        textToAppend = \" \" + text;\n      }\n\n      const selection = window.getSelection();\n      const range = document.createRange();\n\n      range.selectNodeContents(element);\n      range.collapse(false);\n      selection?.removeAllRanges();\n      selection?.addRange(range);\n\n      document.execCommand(\"insertText\", false, textToAppend);\n    }\n\n    const inputEvent = new Event(\"input\", { bubbles: true, cancelable: true });\n    element.dispatchEvent(inputEvent);\n  }\n})();\n"],
  "mappings": "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",
  "names": ["worker", "tooltip", "managerState", "managerState", "mic", "chatInputContentEditable"]
}
